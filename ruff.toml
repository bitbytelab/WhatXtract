# Global settings
fix = true                                 # Automatically apply safe fixes
unsafe-fixes = true                        # Allow potentially unsafe fixes
force-exclude = true                       # Force exclude paths even if passed explicitly
line-length = 120                          # Max line length for code formatting
indent-width = 4                           # Indentation width (spaces)
target-version = "py312"                   # Target Python version for compatibility
builtins = ["_"]                           # Mark "_" as a known builtin (e.g., for translations)
extend-exclude = [                         # Additional files/directories to exclude
    ".run", "__pycache__", "build",
    ".ruff_cache", ".pytest_cache"
]
show-fixes = true                          # Show applied fixes in outputs

# Formatter-specific options
[format]
quote-style = "single"                     # Use single quotes for strings
docstring-code-format = true               # Format code blocks inside docstrings

# Linter configuration
[lint]
select = [                                 # Lint rule groups to enable
  "E",      # pycodestyle: code formatting
  "F",      # pyflakes: undefined vars, unused imports
  "B",      # bugbear: common bugs and antipatterns
  "I",      # import sorting (replaces isort)
  "N",      # pep8-naming: function/class naming
  "D",      # pydocstyle: docstring formatting
  "UP",     # pyupgrade: modern Python syntax
  "C4",     # flake8-comprehensions: comprehension simplification
  "SIM",    # flake8-simplify: redundant code detection
  "TID",    # tidy imports: disallow relative imports
  "RUF",    # ruff-native rules: performance, cleanup
]
ignore = [                                 # Specific rules to ignore
  "B013",   # redundant-tuple-in-exception-handler
  "D105",   # Ignore missing docstring in magic methods
  "D205",   # Ignore blank line requirement in docstrings
  "D212",   # Ignore summary line location rule in multi-line docstrings
  "N812",   # Allow lowercase imports to be aliased as non-lowercase
]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"  # Pattern for dummy variables
logger-objects = ["logging_setup.logger"]  # Custom logger objects to recognize
unfixable = []                             # Lint rules that should never be auto-fixed

# File-specific lint ignores
[lint.extend-per-file-ignores]
"__init__.py" = ["E402"]                   # Allow module-level imports not at top

# Plugin: flake8-annotations
[lint.flake8-annotations]
allow-star-arg-any = true                  # Allow `*args: Any` and `**kwargs: Any`

# Plugin: isort replacement
[lint.isort]
length-sort = true                         # Sort imports by length within sections
order-by-type = true                       # Group by import type
force-single-line = false                  # Use multi-line imports when appropriate
combine-as-imports = true                  # Combine `import x as y` lines
known-first-party = ["whatxtract"]         # First-party package/module names
section-order = [                          # Explicit import section ordering
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

# Plugin: pep8-naming
[lint.pep8-naming]
ignore-names = ["foo", "bar"]              # Ignore naming convention rules for these names

# Plugin: pydocstyle
[lint.pydocstyle]
convention = "google"                      # Use Google-style docstrings
